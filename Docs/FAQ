**
************************************************************************************
**      CodeChix PiDoorbell - Home Automation with RaspberryPi using GPIO
**      codechix.org - May the code be with you...
**              2013-2014
************************************************************************************
**
** License:       	Apache 2.0
** Version:        	1.0
** Project/Library:	PiDoorbell
** Description:    	Frequently Asked Question releated to set up
** Assumptions:    	You know Python and Linux basics. And you like to fiddle 
**                      with hardware.
** Testing:        	Limited - needs lots of testing
**
** Main Contact:   rupa@codechix.org
** Alt. Contact:   organizers@codechix.org
***********************************************************************************
**
1. Hardware you may need for rPi setup
   USB hub: to connect usb mouse, keyboard and wifi dongle at the same time.
            Expected to be needed only for initial setup
   Ethernet cable - crossover: a reliable way to connect to rPi to any computer
                               using static IP addresses on the rPi and computer.
                               Useful when console or wifi fails.
   Ethernet dongle for Mac Air/Pro: if using ethernet to connect to rPi
   Monitor with DVI or HDMI: required for initial setup
       (http://www.monoprice.com/Product?c_id=102&cp_id=10231&cs_id=1023104&p_id=2404&seq=1&format=2)
   Keyboard, Mouse, Monitor: required for initial setup
   HDMI cable or HDMI-DVI cable: depending on monitor


2. Connecting console cable to GPIO pins
Follow adafruit’s tutorial. 
http://learn.adafruit.com/adafruits-raspberry-pi-lesson-5-using-a-console-cable/overview

a. Mac:
Download and install the driver for mac.
screen /dev/cu.PL2303-00001004 115200
The device will have a slightly different name. So, type the line above as far as 
"cu.PL" then press the TAB key to auto-complete to whatever your device is called, 
before adding 115200 (which is the baud rate) to the end.

b. Linux:
sudo screen /dev/ttyUSB0 115200

Tested to work also on Ubuntu on VMFusion. Make sure you select 'connect to Linux' 
option when connecting the USB to Mac.

To exit screen:
get out of the screen by: C-a C-\ (on Mac, C is Command key)

Note:
i. The console has limited ease of use and is slow. It is recommended to setup 
alternate means such as wifi or static ethernet, for ssh access from any computer
on the network.

ii. When on the console, you may get a lot of "noise" which is seen as characters 
appearing on the screen, not created by keystrokes. You may be able to get rid of 
it temporarily by moving the USB cable for the keyboard from one port to another 
(and back) on the card. The noise may be less if the rPi is in a container.

iii. Vi editor works best on the console


3. Network setup: 

a. WIFI with interfaces file:
Edit the /etc/network/interfaces file and reboot

i. Open wifi:
#auto wlan0 - remove this line
iface wlan0 inet dhcp
    wireless-essid "network-name-goes-here"
    wireless-mode managed

ii. Secure wifi:
auto wlan0
allow-hotplug wlan0
iface wlan0 inet dhcp
	wpa-ssid “network name”
	wpa-psk “passphrase”
#Note: remove the wpa_supplicant.conf and inet manual lines for wlan0

b. Static ethernet:
i. Configure static IP address 
Replace the following line:    iface eth0 inet dhcp with this:
iface eth0 inet static
address 192.168.2.2
netmask 255.255.255.0
gateway 192.168.2.1

To enable the configuration, CTRL-ALT-DEL to reboot

If using ethernet, connect the RaspberryPi's ethernet 
cable to your laptop.

Configure your laptop's ethernet address to be 192.168.2.1/24

Note the IP address on the rPi: ifconfig -a
To test network connectivity, ping www.codechix.org from the 
rPi prompt.

Ssh to raspberrypi: ssh pi@<ip address> (password: raspberry)
Optionally, ssh with X: ssh -X pi@<ip address> 

c. Debugging the network:
iwconfig     : shows which wifi SSID it is connected to
ifdown/ifup  : restart the interface to see if the interfaces
             file has some errors
if using wpa_supplicant.conf, launch the script directly
to check for any syntax errors
ifconfig -a  : check for IP address, subnet, gateway on if 

4. Hardware circuit
a. The simple hardware circuit in this project uses two
resistors to bring down the voltage to 3.3V for interfacing
with the rPi. Resistor values are denoted by color bands.
If uncertain, use a multi-meter to confirm the values.

b. Build the circuit on the breadboard by making sure the 
two ends of the resistors go into two different rows. 

Before connecting the rPi or the sensor to the circuit, 
test the circuit by applying 5 volts input where it connects 
to the sensor and measuring voltage at the point that connects
to the rPi. Confirm that this is as per design.

As the next step, test the sensor independently by applying
5 volts at input and testing the Echo line voltage output.

Finally, only when circuit and sensor are independently tested
to work correctly, connect the sensor and rPi to the circuit.


5. Make it work!
This has complete overview, steps and examples on putting it
together.

1) Setup networking on the RaspberryPi via its HDMI console or 
console port. Connect your Raspberry Pi to your laptop using an 
ethernet cable and ssh pi@192.168.2.2 (password: raspberry)

2) Once you ssh, make sure Raspberry Pi can reach the Internet. 
Test with 'ping www.codechix.org'. If ping fails, turn on 
Internet Sharing on your laptop. if you are using a MAC, 
enable this at System Preferences -> Sharing -> Internet Sharing.

3) Issue the following two commands to make sure you are working 
with the latest software on the Raspeberry Pi:
     sudo apt-get update
     sudo apt-get upgrade 
     sudo apt-get install rpi-update
     sudo rpi-update

Note that this takes a while (15-30 min)

4) Install webcam software:
     
     sudo apt-get install fswebcam
     sudo apt-get install libv4l-0
     sudo apt-get install v4l-utils

    You may also need these packages:

     sudo apt-get install uvcvideo
     sudo apt-get install uvccapture
     uv4l_1.9_armhf.deb 

     Useful debugging commands:

     ls -al /dev/video*
     lsusb -v
     dmesg

5) Copy and untar the PiDoorbell code to Raspberry Pi:

     scp pidoorbell-gpio.tar pi@192.168.2.2:
     tar xvf pidoorbell-gpio.tar

6) Test if the sensor is working:

     $ sudo python HC_SR04.py

     If it is working, you should see it spitting out 
     the following messages:

Distance: 87.7 inches
87.7236651623
Distance: 78.3 inches
78.3380201799
Distance: 69.9 inches
69.8602999195
Distance: 87.8 inches
87.7531780817
Distance: 79.4 inches

7) Run dropbox_uploader.sh. You will be asked your app key 
   and secret. Also Permission type:

$ ./dropbox_uploader.sh

 # App key:
<copy here from the website>
# App secret:
<copy here from the website>
# Permission type, App folder or Full Dropbox [a/f]: a


 > Token request... OK

 Please open the following URL in your browser, and allow Dropbox Uploader
 to access your DropBox folder:

 --> https://www2.dropbox.com/1/oauth/authorize?oauth_token=8NGlM1Cj8205nC9q
(this is a sample - you will receive a different URL for authentication
when the script runs.)


8) Update sms_auth_info.py file with twilio, dropbox, and twitter account info

# Twilio authentication credentials
# The values should be in double quotes, i.e., "xyz"

account_sid = <Your Twilio account secure ID>
auth_token = <Your Twilio authentication token>

#Twitter authentication credentials
# The values should be in singl quotes, i.e., 'xyz'

twitter_auth_key = <Your Twitter authentication key>
twitter_auth_secret = <Your Twitter authentication secret>
twitter_access_key = <Your Twitter access key>
twitter_access_secret = <Your Twitter access secret>

# Dropbox app key and secret from the Dropbox dev site
# The values should be in single quotes, i.e., 'xyz'

DB_APP_KEY = <Your Dropbox application key>
DB_APP_SECRET = <Your Dropbox application secret>
DB_ACCESS_TYPE = 'app_folder'

# going to store the access info in this file
# Update the following file with the Dropbox token
# as the first and only line in the file

DB_TOKENS = 'dropbox_token.txt'


9. Run the PiDoorbell code:

pi@raspberrypi ~ $ sudo python pidoorbell-recognizer-gpio.py -i
pic_mode is  2 local_mode is  False
Distance: 87.7 inches
87.7236651623
Distance: 78.3 inches
78.3380201799
Distance: 69.9 inches
69.8602999195
Distance: 87.8 inches
87.7531780817
Distance: 79.4 inches
79.3538012074
Distance: 97.2 inches
97.1790679542
Distance: 77.3 inches
77.3120437803
Distance: 79.4 inches
79.3602403898
Distance: 69.3 inches
69.3499947124
Distance: 89.4 inches
89.4423902711
Distance: 78.6 inches
78.5548059882
Distance: 88.7 inches
88.6627125992
Distance: 89.9 inches
89.9204995661
Distance: 89.1 inches
89.085552245
Distance: 78.9 inches
78.8547645695
Distance: 76.8 inches
76.8038849673
Distance: 88.3 inches
88.2548977123
Distance: 79.7 inches
79.6827361096
Distance: 79.2 inches
79.1955046395
Distance: 9.4 inches
9.44145122999
******  DETECTED AN OBJECT AT --     9.44145122999 -- INCHES ******
Distance: 5.7 inches
5.68365168673
******  DETECTED AN OBJECT AT --     5.68365168673 -- INCHES ******
Distance: 5.4 inches
5.36330236111
******  DETECTED AN OBJECT AT --     5.36330236111 -- INCHES ******
Distance: 5.3 inches
5.27100741303
******  DETECTED AN OBJECT AT --     5.27100741303 -- INCHES ******
Distance: 5.3 inches
5.34505801091
******  DETECTED AN OBJECT AT --     5.34505801091 -- INCHES ******
Taking photo with raspistill
vchiq_lib: Incompatible VCHIQ library - driver version 2 (min 2), library version 6 (min 3)
* failed to open vchiq instance
Traceback (most recent call last):
  File "pidoorbell-recognizer-gpio.py", line 211, in <module>
    pidoorbell_gpio.run(args.i, latency, pic_mode, local_mode)
  File "pidoorbell-recognizer-gpio.py", line 125, in run
    take_still(BASEDIR_FOR_PIDOORBELL_VIDEOS+pidoorbell_filename, verbose=True)
  File "/home/pi/piphoto.py", line 60, in take_still
    raise "raspistill exited with %d" % rv
TypeError: exceptions must be old-style classes or derived from BaseException, not str

{… if the webcam setup is complete, it should take a picture here….]

If you get the following error:

picamera.exc.PiCameraMMALError: Failed to create camera component: Out of memory

There are a couple of config changes you can try:

sudo raspi-config

Go to "Advanced Options" then "Memory Split" and confirm it says 128

Or:

Go to "Enable Camera" and select Enable

Then reboot.


Accounts:

Twilio: 
     Open an account at https://www.twilio.com
     Your account SID and TOKEN are in your Account Settings

     ACCOUNT SID <>
     AUTH TOKEN <>

Dropbox:
     Open an account at https://www.dropbox.com/home
     Get your API Key and Secret at: https://www.dropbox.com/developers/apply?cont=/developers/apps
          App Console
          Create API
          Agree to terms
          Access to files and datastore
          Yes
          Appname: PiDoorbell-Serpil
          App key: <>
          App secret: <>


