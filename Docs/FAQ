**
************************************************************************************
**      CodeChix PiDoorbell - Home Automation with RaspberryPi using GPIO
**      codechix.org - May the code be with you...
**              2013-2014
************************************************************************************
**
** License:       	Apache 2.0
** Version:        	1.0
** Project/Library:	PiDoorbell
** Description:    	Frequently Asked Question releated to set up
** Assumptions:    	You know Python and Linux basics. And you like to fiddle 
**                      with hardware.
** Testing:        	Limited - needs lots of testing
**
** Main Contact:   rupa@codechix.org
** Alt. Contact:   organizers@codechix.org
***********************************************************************************
**
1. Hardware you may need for rPi setup
   USB hub: to connect usb mouse, keyboard and wifi dongle at the same time.
            Expected to be needed only for initial setup
   Ethernet cable - crossover: a reliable way to connect to rPi to any computer
                               using static IP addresses on the rPi and computer.
                               Useful when console or wifi fails.
   Ethernet dongle for Mac Air/Pro: if using ethernet to connect to rPi
   Monitor with DVI or HDMI: required for initial setup
       (http://www.monoprice.com/Product?c_id=102&cp_id=10231&cs_id=1023104&p_id=2404&seq=1&format=2)
   Keyboard, Mouse, Monitor: required for initial setup
   HDMI cable or HDMI-DVI cable: depending on monitor


2. Connecting console cable to GPIO pins
Follow adafruit’s tutorial. 
http://learn.adafruit.com/adafruits-raspberry-pi-lesson-5-using-a-console-cable/overview

a. Mac:
Download and install the driver for mac.
screen /dev/cu.PL2303-00001004 115200
The device will have a slightly different name. So, type the line above as far as 
"cu.PL" then press the TAB key to auto-complete to whatever your device is called, 
before adding 115200 (which is the baud rate) to the end.

b. Linux:
sudo screen /dev/ttyUSB0 115200

Tested to work also on Ubuntu on VMFusion. Make sure you select 'connect to Linux' 
option when connecting the USB to Mac.

To exit screen:
get out of the screen by: C-a C-\ (on Mac, C is Command key)

Note:
i. The console has limited ease of use and is slow. It is recommended to setup 
alternate means such as wifi or static ethernet, for ssh access from any computer
on the network.

ii. When on the console, you may get a lot of "noise" which is seen as characters 
appearing on the screen, not created by keystrokes. You may be able to get rid of 
it temporarily by moving the USB cable for the keyboard from one port to another 
(and back) on the card. The noise may be less if the rPi is in a container.

iii. Vi editor works best on the console


3. Network setup: 

a. WIFI with interfaces file:
Edit the /etc/network/interfaces file and reboot

i. Open wifi:
#auto wlan0 - remove this line
iface wlan0 inet dhcp
    wireless-essid "network-name-goes-here"
    wireless-mode managed

ii. Secure wifi:
auto wlan0
allow-hotplug wlan0
iface wlan0 inet dhcp
	wpa-ssid “network name”
	wpa-psk “passphrase”
#Note: remove the wpa_supplicant.conf and inet manual lines for wlan0

b. Static ethernet:
i. Configure static IP address 
Replace the following line:    iface eth0 inet dhcp with this:
iface eth0 inet static
address 192.168.2.2
netmask 255.255.255.0
gateway 192.168.2.1

To enable the configuration, CTRL-ALT-DEL to reboot

If using ethernet, connect the RaspberryPi's ethernet 
cable to your laptop.

Configure your laptop's ethernet address to be 192.168.2.1/24

Note the IP address on the rPi: ifconfig -a
To test network connectivity, ping www.codechix.org from the 
rPi prompt.

Ssh to raspberrypi: ssh pi@<ip address> (password: raspberry)
Optionally, ssh with X: ssh -X pi@<ip address> 

c. Debugging the network:
iwconfig     : shows which wifi SSID it is connected to
ifdown/ifup  : restart the interface to see if the interfaces
             file has some errors
if using wpa_supplicant.conf, launch the script directly
to check for any syntax errors
ifconfig -a  : check for IP address, subnet, gateway on if 

4. Hardware circuit
a. The simple hardware circuit in this project uses two
resistors to bring down the voltage to 3.3V for interfacing
with the rPi. Resistor values are denoted by color bands.
If uncertain, use a multi-meter to confirm the values.

b. Build the circuit on the breadboard by making sure the 
two ends of the resistors go into two different rows. 

Before connecting the rPi or the sensor to the circuit, 
test the circuit by applying 5 volts input where it connects 
to the sensor and measuring voltage at the point that connects
to the rPi. Confirm that this is as per design.

As the next step, test the sensor independently by applying
5 volts at input and testing the Echo line voltage output.

Finally, only when circuit and sensor are independently tested
to work correctly, connect the sensor and rPi to the circuit.


5. Make it work!
This has complete overview, steps and examples on putting it
together.

1) Setup networking on the RaspberryPi via its HDMI console or 
console port. Connect your Raspberry Pi to your laptop using an 
ethernet cable and ssh pi@192.168.2.2 (password: raspberry)

2) Once you ssh, make sure Raspberry Pi can reach the Internet. 
Test with 'ping www.codechix.org'. If ping fails, turn on 
Internet Sharing on your laptop. if you are using a MAC, 
enable this at System Preferences -> Sharing -> Internet Sharing.

3) Issue the following two commands to make sure you are working 
with the latest software on the Raspeberry Pi:
     sudo apt-get update
     sudo apt-get upgrade 
     sudo apt-get install python-pip pyserial RPI.Gpio
     sudo pip install twilio dropbox
     sudo rpi-update
     

Note that this takes a while (15-30 min)

4) Install webcam software:
     
     sudo apt-get install fswebcam
     sudo apt-get install libv4l-0
     sudo apt-get install v4l-utils

    You may also need these packages:

     sudo apt-get install uvcvideo
     sudo apt-get install uvccapture
     uv4l_1.9_armhf.deb 

     Useful debugging commands:

     ls -al /dev/video*
     lsusb -v
     dmesg

5) Copy and untar the PiDoorbell code to Raspberry Pi:

     scp pidoorbell-gpio.tar pi@192.168.2.2:
     tar xvf pidoorbell-gpio.tar

6) Test if the sensor is working:

     Create the directory to store photos and videos to
     upload to Dropbox:  mkdir dropbox-pidoorbell 

     $ sudo python HC_SR04.py

     If it is working, you should see it spitting out 
     the following messages:

Distance: 87.7 inches
87.7236651623
Distance: 78.3 inches
78.3380201799
Distance: 69.9 inches
69.8602999195
Distance: 87.8 inches
87.7531780817
Distance: 79.4 inches

6b) Test if fswebcam is working and you can capture a photo
   fswebcam test_image.jpg  
   Check and make sure the image is accurate
   One way to do this is to copy the file to your laptop
    and view it there.

7) Run dropbox_uploader.sh. You will be asked your app key 
   and secret. Also Permission type:

$ ./dropbox_uploader.sh

 # App key:
<copy here from the website>
# App secret:
<copy here from the website>
# Permission type, App folder or Full Dropbox [a/f]: a


 > Token request... OK

 Please open the following URL in your browser, and allow Dropbox Uploader
 to access your DropBox folder:

 --> https://www2.dropbox.com/1/oauth/authorize?oauth_token=8NGlM1Cj8205nC9q
(this is a sample - you will receive a different URL for authentication
when the script runs.)

Note: This should only be required the first time.  However, there have
been some changes to the dropbox-uploader.sh script and you might need to enter
this info every time.  Rupa is looking into this to determine what changed.
Reference: https://github.com/andreafabrizi/Dropbox-Uploader


8) Update sms_auth_info.py file with twilio, dropbox, and twitter account info

Accounts:

Twilio: 
     Open an account at https://www.twilio.com
     Your account SID and TOKEN are in your Account Settings

     ACCOUNT SID <>
     AUTH TOKEN <>

Dropbox:
     Open an account at https://www.dropbox.com/home
     Get your API Key and Secret at: https://www.dropbox.com/developers/apply?cont=/developers/apps
          App Console
          Create API
          Agree to terms
          Access to files and datastore
          Yes
          Appname: PiDoorbell-Serpil
          App key: <>
          App secret: <>


# Twilio authentication credentials
# The values should be in double quotes, i.e., "xyz"

account_sid = <Your Twilio account secure ID>
auth_token = <Your Twilio authentication token>

#Twitter authentication credentials
# The values should be in singl quotes, i.e., 'xyz'

twitter_auth_key = <Your Twitter authentication key>
twitter_auth_secret = <Your Twitter authentication secret>
twitter_access_key = <Your Twitter access key>
twitter_access_secret = <Your Twitter access secret>

# Dropbox app key and secret from the Dropbox dev site
# The values should be in single quotes, i.e., 'xyz'

DB_APP_KEY = <Your Dropbox application key>
DB_APP_SECRET = <Your Dropbox application secret>
DB_ACCESS_TYPE = 'app_folder'


8a. Get twilio APIs:

          sudo apt-get install python-pip
          sudo pip install twilio


10. Run the PiDoorbell code:

pi@raspberrypi ~ $ sudo python pidoorbell-recognizer-gpio.py -i -m sms
Distance: 62.6 inches
62.6430496187
Distance: 62.3 inches
62.2577718703
Distance: 42.8 inches
42.7647568755
Distance: 2.1 inches
2.07288014217
******  DETECTED AN OBJECT AT --     2.07288014217 -- INCHES ******
Distance: 1.9 inches
1.92692534055
******  DETECTED AN OBJECT AT --     1.92692534055 -- INCHES ******
Distance: 2.4 inches
2.43293775941
******  DETECTED AN OBJECT AT --     2.43293775941 -- INCHES ******
Distance: 1.8 inches
1.79975148766
******  DETECTED AN OBJECT AT --     1.79975148766 -- INCHES ******
Distance: 1.7 inches
1.70531014543
******  DETECTED AN OBJECT AT --     1.70531014543 -- INCHES ******
Taking photo with fswebcam ...
--- Opening /dev/video0...
Trying source module v4l2...
/dev/video0 opened.
No input was specified, using the first.
--- Capturing frame...
Corrupt JPEG data: 4 extraneous bytes before marker 0xd0
Captured frame in 0.00 seconds.
--- Processing captured image...
Writing JPEG image to './dropbox-pidoorbell/visitor-photo-2014:3:24-6:27.jpg'.


************************** UPLOADING TO DROPBOX: ************************


latency is 20
 > Uploading "/home/pi/dropbox-pidoorbell/visitor-photo-2014:3:24-6:27.jpg" to "/visitor-photo-2014:3:24-6:27.jpg"... DONE


 ************************ SENDING SMS WITH URL:  https://www.dropbox.com/s/gup8mj1ck7l5uez/visitor-photo-2014%3A3%3A24-6%3A27.jpg  *************************


Done sleeping  - I'm awake again!!!! 


==========================================
PiCam use case:

sudo raspi-config

Go to "Advanced Options" then "Memory Split" and confirm it says 128

Or:

Go to "Enable Camera" and select Enable

Then reboot.



